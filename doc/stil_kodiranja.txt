

1. Увлачење за по 4 места.
Користити праве таб знаке уместо четири размака. Дакле, величину таба у едитору поставити на 4.


2. Размаке убацивати пре и после аритметичких и логичких операција.
Пример:
a = x * y;
(не овако: a=x * y;, или слично)


3. Размаке убацивати после ','.
Пример:
foo(a, b)
(не овако: foo(a,b))


4. Иза ; треба увек да иде нови ред (дакле, не набијати више наредби у исту линију), осим код for наредбе, где иза ; иде само размак.
Пример 1:
a = x * y;
z = a + 2;
(не овако: a = x * y; z = a + 2;)
Пример 2:
for (i = 0; i < 5; i++)
(не овако: for (i = 0;i < 5;i++))
(али ни овако:
for (i = 0;
i < 5;
i++))


5. Размаке убацивати између резервисане речи и (.
Не убацивати размаке између осталих идентификатора и (.
Пример:
if (a < 5)
	foo(a);
(не овако: if(a < 5), или foo (a))


6. { иде у нови ред и не увлачи се за нова четири места.
Пример:
for (i = 0; i < 5; i++)
{
	foo(i);
	bar(i);
}
(не овако:
for (i = 0; i < 5; i++) {
	foo(i);
	bar(i);
}
али ни овако:
for (i = 0; i < 5; i++)
	{
		foo(i);
		bar(i);
	})


7. Све наредбе унутар {} блока се увлаче за један ниво, осим лабела. Под лабелама се у овом правилу подразумевају goto лабеле, case наредбе унутар switch исказа, као и public, private и protected резервисане речи.
Пример:
switch (x)
{
case 1:
	foo(x);
	break;
default:
	bar(x);
}


8. using namespace не користити у заглављима (.h), већ само у .cpp датотекама.


9. У првој #include директиви у некој .cpp датотеци треба да се укључи заглавље истог имена. Затим иде бар један ред размака, па тек онда све остале #include директиве.


10. Имена променљивих (објеката), функција и метода почиње малим словом, а нове речи у називу почињу великим словом. То је такозвана "мала камиља нотација".
Пример:
prvaDrugaTrecaRec


11. Имена класа се пишу "великом камиљом нотацијом". То је исто као мала камиља нотација (погледати тачку 10) али где и прва реч почиње великим словом.
Пример:
PrvaDrugaTrecaRec


12. Атрибути класе (променљиве, то јест објекти, чланови класе) треба да се именују са "m_" на почетку. Тиме се истиче да су чланови класе. Глобалне променљиве (објекти) треба да имају "g_" на почетку назива. Тиме се истиче да су глобални. Назив који иде иза "m_" или "g_" треба да прати малу камиљу нотацију, као што је и назначено у тачки 10.


13. Оператор delete већ обавља проверу да ли је показивач NULL, тако да пре његовог позива то не треба радити.
Пример:
SomeClass* p = new SomeClass();
...
delete p;
(не овако:
if (p != NULL)
	delete p;)


14. Уколико је оператором new заузет низ елемената, онда одговарајући позив оператора delete мора бити праћен са [].
Пример:
int* p = new int [n];
...
delete [] p;
(не овако: delete p;)


15. Ослањати се на bool тип у C++-у, а не на интерпретирање int типа (вредност 0 је нетачно, а свака друга вредност је тачно).
Пример:
int a;
if (a != 0) // тип израза "а != 0" је bool
	...
(не овако:
if (a) // тип поменљиве а је int
	...)


16. Не претпостављати да је константа NULL једнака 0.
Пример:
int* p = NULL;
...
if (p != NULL)
	...
(не овако:
if (p != 0)
	...
а ни овако:
if (p)
	...)


17. Трудити се (дакле, ово правило није обавезно) да се једна променљива (објекат) декларише у једном реду.
Пример:
int a;
int b;
(не овако: int a, b;)


18. Када знак * одређује показивач на неки други тип писати га уз тај тип, а не уз назив променљиве.
Пример:
int* p;
(не овако: int *p;)

